// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// i2c //
// --- //

#define i2c_wrap_target 10
#define i2c_wrap 15

#define i2c_offset_entry_point 10u

static const uint16_t i2c_program_instructions[] = {
    0x008a, //  0: jmp    y--, 10                    
    0xc030, //  1: irq    wait 0 rel                 
    0xe027, //  2: set    x, 7                       
    0x6181, //  3: out    pindirs, 1             [1] 
    0x38a1, //  4: wait   1 pin, 1        side 1     
    0x4001, //  5: in     pins, 1                    
    0x1243, //  6: jmp    x--, 3          side 0 [2] 
    0x6081, //  7: out    pindirs, 1                 
    0x38a1, //  8: wait   1 pin, 1        side 1     
    0x10c0, //  9: jmp    pin, 0          side 0     
            //     .wrap_target
    0x6026, // 10: out    x, 6                       
    0x6041, // 11: out    y, 1                       
    0x0022, // 12: jmp    !x, 2                      
    0x6060, // 13: out    null, 32                   
    0x60f0, // 14: out    exec, 16                   
    0x004e, // 15: jmp    x--, 14                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program i2c_program = {
    .instructions = i2c_program_instructions,
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config i2c_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + i2c_wrap_target, offset + i2c_wrap);
    sm_config_set_sideset(&c, 2, true, true);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"
static inline void i2c_program_init(PIO pio, uint sm, uint offset, uint pin_sda, uint pin_scl, uint pin_hs) {
    assert(pin_scl == pin_sda + 1);
    pio_sm_config c = i2c_program_get_default_config(offset);
    // IO mapping
    sm_config_set_out_pins(&c, pin_sda, 1);
    sm_config_set_set_pins(&c, pin_sda, 1);
    sm_config_set_in_pins(&c, pin_sda);
    sm_config_set_sideset_pins(&c, pin_scl);
    sm_config_set_jmp_pin(&c, pin_sda);
    sm_config_set_out_shift(&c, false, true, 16);
    sm_config_set_in_shift(&c, false, true, 8);
    float div = (float)clock_get_hz(clk_sys) / (8 * 3400000);
    sm_config_set_clkdiv(&c, div);
    // Initialize GPIO pin controlling external HS circuitry, defaulting
    // to low. This GPIO is brought high to enable the HS circuitry.
    if (pin_hs < NUM_BANK0_GPIOS) {
      gpio_pull_down(pin_hs);
      gpio_init(pin_hs);
      gpio_set_dir(pin_hs, GPIO_OUT);
      gpio_put(pin_hs, false);
    }
    // Try to avoid glitching the bus while connecting the IOs. Get things set
    // up so that pin is driven down when PIO asserts OE low, and pulled up
    // otherwise.
    gpio_pull_up(pin_scl);
    gpio_pull_up(pin_sda);
    uint32_t both_pins = (1u << pin_sda) | (1u << pin_scl);
    pio_sm_set_pins_with_mask(pio, sm, both_pins, both_pins);
    pio_sm_set_pindirs_with_mask(pio, sm, both_pins, both_pins);
    pio_gpio_init(pio, pin_sda);
    gpio_set_oeover(pin_sda, GPIO_OVERRIDE_INVERT);
    pio_gpio_init(pio, pin_scl);
    gpio_set_oeover(pin_scl, GPIO_OVERRIDE_INVERT);
    pio_sm_set_pins_with_mask(pio, sm, 0, both_pins);
    // Clear IRQ flag before starting, errors assert interrupt 0+sm, but
    // unless we are in DMA mode, we don't want to assert a system
    // level irq.
    pio_interrupt_clear(pio, sm);
    pio_set_irq0_source_enabled(pio, pis_interrupt0 + sm, false);
    pio_set_irq1_source_enabled(pio, pis_interrupt0 + sm, false);
    // Configure and start SM
    pio_sm_init(pio, sm, offset + i2c_offset_entry_point, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ----------- //
// set_scl_sda //
// ----------- //

#define set_scl_sda_wrap_target 0
#define set_scl_sda_wrap 13

static const uint16_t set_scl_sda_program_instructions[] = {
            //     .wrap_target
    0xf180, //  0: set    pindirs, 0      side 0 [1] 
    0xf181, //  1: set    pindirs, 1      side 0 [1] 
    0xf980, //  2: set    pindirs, 0      side 1 [1] 
    0xf981, //  3: set    pindirs, 1      side 1 [1] 
    0xf580, //  4: set    pindirs, 0      side 0 [5] 
    0xfe80, //  5: set    pindirs, 0      side 1 [6] 
    0xff80, //  6: set    pindirs, 0      side 1 [7] 
    0xf581, //  7: set    pindirs, 1      side 0 [5] 
    0xf681, //  8: set    pindirs, 1      side 0 [6] 
    0xfd81, //  9: set    pindirs, 1      side 1 [5] 
    0xfe81, // 10: set    pindirs, 1      side 1 [6] 
    0xff81, // 11: set    pindirs, 1      side 1 [7] 
    0x21a1, // 12: wait   1 pin, 1               [1] 
    0x27a1, // 13: wait   1 pin, 1               [7] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program set_scl_sda_program = {
    .instructions = set_scl_sda_program_instructions,
    .length = 14,
    .origin = -1,
};

static inline pio_sm_config set_scl_sda_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + set_scl_sda_wrap_target, offset + set_scl_sda_wrap);
    sm_config_set_sideset(&c, 2, true, true);
    return c;
}

// Define order of our instruction table
enum {
    I2C_SC0_SD0_HS = 0,
    I2C_SC0_SD1_HS,
    I2C_SC1_SD0_HS,
    I2C_SC1_SD1_HS,
    I2C_0S0_8,
    I2C_0S1_9,
    I2C_0S1_10,
    I2C_1S0_8,
    I2C_1S0_9,
    I2C_1S1_8,
    I2C_1S1_9,
    I2C_1S1_10,
    I2C_W1P1_4,
    I2C_W1P1_10
};

#endif

